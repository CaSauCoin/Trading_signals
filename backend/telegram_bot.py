import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from AdvancedSMC import AdvancedSMC
import json
import os
import time
from datetime import datetime, timedelta

# Logging configuration
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

class TradingBot:
    def __init__(self, token):
        self.token = token
        self.smc_analyzer = AdvancedSMC()
        self.application = None
        # tracked_pairs: { chat_id: { symbol: {"job": Job, "pinned_message_id": int or None, "timeframe": str, "created_at":timestamp} } }
        self.tracked_pairs = {}
        self.MAX_TRACKS_PER_CHAT = 3

    def format_price(self, price: float) -> str:
        """
        Format gi√° token:
        - N·∫øu gi√° >= 1: hi·ªÉn th·ªã 2 ch·ªØ s·ªë th·∫≠p ph√¢n
        - N·∫øu gi√° < 1: hi·ªÉn th·ªã t·ªëi ƒëa 8 ch·ªØ s·ªë th·∫≠p ph√¢n (kh√¥ng m·∫•t s·ªë 0)
        """
        try:
            if price >= 1:
                return f"{price:,.2f}"   # v√≠ d·ª•: 63,245.15
            else:
                return f"{price:,.8f}".rstrip('0').rstrip('.')  # v√≠ d·ª•: 0.00001234
        except Exception:
            return str(price)

    # Helper to build consistent keyboard (includes Track/Stop Track depending on state)
    def build_reply_markup(self, symbol: str, timeframe: str, chat_id: int):
        symbol_encoded = symbol.replace('/', '_')
        is_tracked = (chat_id in self.tracked_pairs and symbol in self.tracked_pairs[chat_id])
        track_button = InlineKeyboardButton(
            "üîî Stop Tracking" if is_tracked else "üîî Track",
            callback_data=(f'untrack_{symbol_encoded}' if is_tracked else f'track_{symbol_encoded}_{timeframe}')
        )

        keyboard = [
            [InlineKeyboardButton("üìä 15m", callback_data=f'tf_{symbol_encoded}_15m'),
             InlineKeyboardButton("üìä 1h", callback_data=f'tf_{symbol_encoded}_1h'),
             InlineKeyboardButton("üìä 4h", callback_data=f'tf_{symbol_encoded}_4h')],
            [InlineKeyboardButton("üìä 1d", callback_data=f'tf_{symbol_encoded}_1d'),
             InlineKeyboardButton("üìä 3d", callback_data=f'tf_{symbol_encoded}_3d'),
             InlineKeyboardButton("üìä 1w", callback_data=f'tf_{symbol_encoded}_1w')],
            [InlineKeyboardButton("üîÑ Refresh", callback_data=f'tf_{symbol_encoded}_{timeframe}'),
             InlineKeyboardButton("üè† Menu", callback_data='start')],
            [track_button]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler cho command /start"""
        keyboard = [
            [InlineKeyboardButton("üìä Ph√¢n t√≠ch BTC/USDT", callback_data='analyze_BTC/USDT'),
             InlineKeyboardButton("üìà Ph√¢n t√≠ch ETH/USDT", callback_data='analyze_ETH/USDT')],
            [InlineKeyboardButton("üìà Ph√¢n t√≠ch BTCDOM/USDT", callback_data='analyze_BTCDOM/USDT'),
             InlineKeyboardButton("üìà Ph√¢n t√≠ch DOGE/USDT", callback_data='analyze_DOGE/USDT')],
            [InlineKeyboardButton("üîç Ch·ªçn c·∫∑p kh√°c", callback_data='select_pair')],
            [InlineKeyboardButton("‚ÑπÔ∏è H∆∞·ªõng d·∫´n", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = """
üöÄ **Trading Bot SMC!**

Ch·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu:
        """

        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler cho c√°c n√∫t inline"""
        query = update.callback_query
        await query.answer()

        if query.data.startswith('analyze_'):
            symbol = query.data.replace('analyze_', '')
            await self.send_analysis(query, symbol, '4h')  # Default timeframe
        elif query.data == 'select_pair':
            await self.show_pair_selection(query)
        elif query.data == 'help':
            await self.show_help(query)
        elif query.data == 'start':
            await self.show_main_menu(query)
        elif query.data.startswith('pair_'):
            symbol = query.data.replace('pair_', '')
            await self.send_analysis(query, symbol, '4h')
        elif query.data.startswith('tf_'):
            # X·ª≠ l√Ω timeframe: tf_SYMBOL_TIMEFRAME
            parts = query.data.replace('tf_', '').split('_')
            if len(parts) >= 2:
                symbol = '_'.join(parts[:-1])  # Gh√©p l·∫°i symbol (c√≥ th·ªÉ ch·ª©a d·∫•u /)
                symbol = symbol.replace('_', '/')  # Convert back to BTC/USDT format
                timeframe = parts[-1]
                await self.send_analysis(query, symbol, timeframe)
        elif query.data.startswith('track_'):
            # track_SYMBOL_TIMEFRAME
            inner = query.data.replace('track_', '')
            parts = inner.split('_')
            if len(parts) >= 2:
                timeframe = parts[-1]
                symbol = '_'.join(parts[:-1]).replace('_', '/')
                await self._start_tracking_from_callback(query, context, symbol, timeframe)
            else:
                await query.edit_message_text("Format track kh√¥ng h·ª£p l·ªá.")
        elif query.data.startswith('untrack_'):
            # untrack_SYMBOL
            symbol = query.data.replace('untrack_', '').replace('_', '/')
            await self._stop_tracking_from_callback(query, context, symbol)
        elif query.data == 'input_pair':
            # Set flag to expect next text as pair
            context.user_data['awaiting_pair'] = True
            await query.edit_message_text("Vui l√≤ng g·ª≠i c·∫∑p theo ƒë·ªãnh d·∫°ng `PAIR TIMEFRAME` (v√≠ d·ª•: `BTC/USDT 4h`). Ho·∫∑c ch·ªâ g·ª≠i `BTC/USDT` ƒë·ªÉ m·∫∑c ƒë·ªãnh 4h.", parse_mode='Markdown')
        else:
            await query.edit_message_text("Ch·ª©c nƒÉng ch∆∞a h·ªó tr·ª£")

    # === T·ª∞ ƒê·ªòNG THEO D√ïI ===
    async def auto_track_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text("C√°ch d√πng: /autotrack BTC/USDT 4h")
            return

        symbol = context.args[0].upper()
        timeframe = context.args[1] if len(context.args) > 1 else "4h"
        chat_id = update.message.chat_id

        # ensure chat dict
        if chat_id not in self.tracked_pairs:
            self.tracked_pairs[chat_id] = {}

        # enforce max 3
        if symbol not in self.tracked_pairs[chat_id] and len(self.tracked_pairs[chat_id]) >= self.MAX_TRACKS_PER_CHAT:
            await update.message.reply_text(f"‚ö†Ô∏è You already track {self.MAX_TRACKS_PER_CHAT} pairs. Please stop one before adding another.")
            return

        # N·∫øu ƒë√£ c√≥ job -> h·ªßy tr∆∞·ªõc
        if symbol in self.tracked_pairs[chat_id]:
            try:
                self.tracked_pairs[chat_id][symbol]['job'].schedule_removal()
            except Exception:
                pass

        # T·∫°o job l·∫∑p l·∫°i 30 ph√∫t (first = 1800 ƒë·ªÉ kh√¥ng duplicate ngay l·∫≠p t·ª©c)
        job = self.application.job_queue.run_repeating(
            self.send_auto_analysis,
            interval=300,  # 30 ph√∫t
            first=300,
            chat_id=chat_id,
            name=f"autotrack_{chat_id}_{symbol}",
            data={"symbol": symbol, "timeframe": timeframe}
        )

        # Save without pinned_message_id (will be set if user pins an analysis message)
        self.tracked_pairs[chat_id][symbol] = {"job": job, "pinned_message_id": None, "timeframe": timeframe, "created_at": time.time()}
        await update.message.reply_text(f"‚úÖ ƒê√£ b·∫≠t auto theo d√µi {symbol} {timeframe} (30 ph√∫t/l·∫ßn). L∆∞u √Ω: ƒë·ªÉ pin v√† auto-update tr√™n 1 message, h√£y nh·∫•n n√∫t 'Track' tr√™n message ph√¢n t√≠ch t∆∞∆°ng ·ª©ng.")

    async def stop_track_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Command /stoptrack SYMBOL"""
        if not context.args:
            await update.message.reply_text("C√°ch d√πng: /stoptrack BTC/USDT")
            return

        symbol = context.args[0].upper()
        chat_id = update.message.chat_id

        if chat_id in self.tracked_pairs and symbol in self.tracked_pairs[chat_id]:
            info = self.tracked_pairs[chat_id].pop(symbol)
            try:
                info['job'].schedule_removal()
            except Exception:
                pass
            # unpin if pinned
            pinned_id = info.get('pinned_message_id')
            if pinned_id:
                try:
                    await self.application.bot.unpin_chat_message(chat_id=chat_id, message_id=pinned_id)
                except Exception as e:
                    logger.warning(f"Cannot unpin message: {e}")
            await update.message.reply_text(f"üõë ƒê√£ t·∫Øt auto theo d√µi {symbol}.")
        else:
            await update.message.reply_text(f"{symbol} ch∆∞a ƒë∆∞·ª£c theo d√µi.")

    async def send_auto_analysis(self, context: ContextTypes.DEFAULT_TYPE):
        """Job t·ª± ƒë·ªông g·ª≠i ph√¢n t√≠ch - s·∫Ω edit pinned message n·∫øu c√≥, else g·ª≠i message m·ªõi"""
        job_data = context.job.data or {}
        symbol = job_data.get("symbol")
        timeframe = job_data.get("timeframe", "4h")
        chat_id = context.job.chat_id

        try:
            result = self.smc_analyzer.get_trading_signals(symbol, timeframe)
            if not result:
                await context.bot.send_message(chat_id, f"‚ö† Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu cho {symbol}.")
                return

            message_text = self.format_analysis_message(result)
            # build reply_markup
            reply_markup = self.build_reply_markup(symbol, timeframe, chat_id)

            # find tracked info
            chat_tracks = self.tracked_pairs.get(chat_id, {})
            info = chat_tracks.get(symbol)

            # If pinned message exists -> edit it so tracking message doesn't drift
            if info and info.get('pinned_message_id'):
                pinned_id = info.get('pinned_message_id')
                try:
                    # edit pinned message
                    await context.bot.edit_message_text(
                        text=message_text,
                        chat_id=chat_id,
                        message_id=pinned_id,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                    # done
                    return
                except Exception as e:
                    logger.warning(f"Failed to edit pinned message {pinned_id} for {symbol} in chat {chat_id}: {e}")
                    # fallback: send a new message and update pinned_message_id if pin successful
            # If pinned missing or edit failed -> send a new message (but we want tracking messages to be pinned by user action)
            sent = await context.bot.send_message(chat_id, message_text, reply_markup=reply_markup, parse_mode='Markdown')
            # If this symbol is tracked in our map but had no pinned_id, do NOT auto-pin here (we rely on user pressing Track on the message).
            # However if info exists and pinned_message_id is None, optionally update pinned_message_id to latest bot message
            # We will NOT auto-pin to avoid permission surprise; user asked pinned message comes from their Track action.
            # If you prefer auto-pin here, uncomment the following block (requires bot can pin messages automatically):
            # try:
            #     await context.bot.pin_chat_message(chat_id=chat_id, message_id=sent.message_id, disable_notification=True)
            #     if info is not None:
            #         info['pinned_message_id'] = sent.message_id
            # except Exception as e:
            #     logger.warning(f"Cannot auto-pin message: {e}")
        except Exception as e:
            logger.error(f"Error in auto-track job for {symbol}: {e}")
            try:
                await context.bot.send_message(chat_id, f"‚ùå L·ªói auto-track {symbol}: {e}")
            except Exception:
                pass

    # g·ª≠i ph√¢n t√≠ch (s·ª≠a th√™m n√∫t Track/Stop Track)
    async def send_analysis(self, query, symbol, timeframe='4h'):
        """G·ª≠i ph√¢n t√≠ch SMC cho symbol v·ªõi timeframe c·ª• th·ªÉ"""
        await query.edit_message_text("üîÑ ƒêang ph√¢n t√≠ch... Vui l√≤ng ƒë·ª£i...")

        try:
            # L·∫•y ph√¢n t√≠ch t·ª´ SMC
            result = self.smc_analyzer.get_trading_signals(symbol, timeframe)

            if result is None:
                await query.edit_message_text("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.")
                return

            # Format message v·ªõi error handling
            try:
                message = self.format_analysis_message(result)
            except Exception as e:
                logger.error(f"Error formatting message: {e}")
                message = f"‚ùå L·ªói khi format message cho {symbol}\nVui l√≤ng th·ª≠ l·∫°i sau."
                await query.edit_message_text(message)
                return

            # Build reply_markup using helper
            chat_id = query.message.chat_id
            reply_markup = self.build_reply_markup(symbol, timeframe, chat_id)

            # Edit the callback message with the analysis and include Track/Stop button
            try:
                await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Markdown parse error: {e}")
                # Fallback: g·ª≠i message kh√¥ng c√≥ markdown
                plain_message = message.replace('*', '').replace('_', '')
                sent = await query.edit_message_text(plain_message, reply_markup=reply_markup)
            # Note: when the user presses the Track button, _start_tracking_from_callback will pin this message and store pinned_message_id
        except Exception as e:
            logger.error(f"Error in analysis: {e}")
            error_msg = f"‚ùå L·ªói khi ph√¢n t√≠ch {symbol}:\n{str(e)[:100]}..."
            await query.edit_message_text(error_msg)

    def format_analysis_message(self, result):
        """Format k·∫øt qu·∫£ ph√¢n t√≠ch th√†nh message Telegram v·ªõi th√¥ng tin chi ti·∫øt"""
        smc = result['smc_analysis']
        indicators = result['indicators']
        trading_signals = result.get('trading_signals', {})

        # Header
        message = f"üìä *Ph√¢n t√≠ch {result['symbol']} - {result['timeframe']}*\n\n"

        # Price info
        message += f"üí∞ *Gi√° hi·ªán t·∫°i:* ${self.format_price(result['current_price'])}\n"

        # Indicators
        rsi = indicators.get('rsi', 50)
        rsi_emoji = "üü¢" if rsi < 30 else ("üî¥" if rsi > 70 else "üü°")
        message += f"üìà *RSI:* {rsi_emoji} {rsi:.1f}\n"
        message += f"üìä *Gi√° s√°t:* ${self.format_price(indicators.get('sma_20', 0))}\n"
        message += f"üìâ *Gi√° d·ª± t·ªët:* ${self.format_price(indicators.get('ema_20', 0))}\n\n"

        # Price change
        price_change = indicators.get('price_change_pct', 0)
        change_emoji = "üìà" if price_change > 0 else "üìâ"
        message += f"{change_emoji} *Thay ƒë·ªïi:* {price_change:+.2f}%\n\n"

        # SMC Analysis - Detailed
        message += "üîç *ANALYSIS:*\n"

        # Order Blocks
        ob_count = len(smc['order_blocks'])
        message += f"üì¶ *Order Blocks:* {ob_count}\n"
        if ob_count > 0:
            try:
                latest_ob = smc['order_blocks'][-1]
                ob_emoji = "üü¢" if latest_ob['type'] == 'bullish_ob' else "üî¥"
                if latest_ob.get('low') is not None and latest_ob.get('high') is not None:
                    message += f"   {ob_emoji} Latest OB: ${self.format_price(latest_ob['low'])} - ${self.format_price(latest_ob['high'])}\n"
            except Exception:
                print("D·ªØ li·ªáu OB kh√¥ng ƒë·∫ßy ƒë·ªß")

        # Fair Value Gaps
        fvg_count = len(smc['fair_value_gaps'])
        if fvg_count > 0:
            try:
                latest_fvg = smc['fair_value_gaps'][-1]
                fvg_emoji = "üü¢" if latest_fvg['type'] == 'bullish_fvg' else "üî¥"
                if latest_fvg.get('top') is not None and latest_fvg.get('bottom') is not None:
                    message += f"üéØ Latest FVG: ${self.format_price(latest_fvg['bottom'])} - ${self.format_price(latest_fvg['top'])}\n"
            except Exception:
                print("D·ªØ li·ªáu FVG kh√¥ng ƒë·∫ßy ƒë·ªß")

        # Break of Structure
        bos_count = len(smc['break_of_structure'])
        message += f"üîÑ *Structure:* {bos_count}\n"
        if bos_count > 0:
            try:
                latest_bos = smc['break_of_structure'][-1]
                bos_emoji = "üü¢" if latest_bos['type'] == 'bullish_bos' else "üî¥"
                bos_type = latest_bos['type'].replace('_', ' ').upper()
                message += f"   {bos_emoji} G·∫ßn nh·∫•t: {bos_type}\n"
                message += f"    Price: ${self.format_price(latest_bos['price'])}\n"
            except Exception:
                print("D·ªØ li·ªáu BOS kh√¥ng ƒë·∫ßy ƒë·ªß")

        # Liquidity Zones
        lz_count = len(smc['liquidity_zones'])
        message += f"üíß *Liquidity Zones:* {lz_count}\n"
        if lz_count > 0:
            try:
                latest_lz = smc['liquidity_zones'][-1]
                lz_emoji = "üîµ" if latest_lz['type'] == 'buy_side_liquidity' else "üü†"
                message += f"   {lz_emoji} G·∫ßn nh·∫•t: {latest_lz.get('type','N/A')}\n"
                if latest_lz.get('price') is not None:
                    message += f"    Level: ${self.format_price(latest_lz['price'])}\n"
            except Exception:
                print("D·ªØ li·ªáu LZ kh√¥ng ƒë·∫ßy ƒë·ªß")

        message += "\n"

        # Trading Signals
        if trading_signals:
            message += "üîî *TRADING SIGNALS:*\n"
            entry_long = trading_signals.get('entry_long', [])
            entry_short = trading_signals.get('entry_short', [])
            exit_long = trading_signals.get('exit_long', [])
            exit_short = trading_signals.get('exit_short', [])

            try:
                if entry_long:
                    latest_long = entry_long[-1]
                    message += f"üü¢ *Long Signal:* ${self.format_price(latest_long['price'])}\n"
                    #message += f"    Tag: {latest_long.get('tag', 'N/A')}\n"

                if entry_short:
                    latest_short = entry_short[-1]
                    message += f"üî¥ *Short Signal:* ${self.format_price(latest_short['price'])}\n"
                   # message += f"    Tag: {latest_short.get('tag', 'N/A')}\n"

                if exit_long:
                    message += f"‚ùå *Exit Long:* {len(exit_long)} signals\n"

                if exit_short:
                    message += f"‚ùå *Exit Short:* {len(exit_short)} signals\n"

                if not any([entry_long, entry_short, exit_long, exit_short]):
                    message += "‚è∏Ô∏è Kh√¥ng c√≥ signal n√†o\n"

            except Exception:
                message += "‚ö†Ô∏è D·ªØ li·ªáu signals kh√¥ng ƒë·∫ßy ƒë·ªß\n"

            message += "\n"

        # Trading suggestion (advanced)
        try:
            suggestion = self.get_trading_suggestion(smc, indicators, trading_signals)
            message += f"üí° *G·ª£i √Ω Trading:*\n{suggestion}\n\n"
        except Exception as e:
            message += "üí° *G·ª£i √Ω Trading:* Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω\n\n"

        # Timestamp
        try:
            timestamp = datetime.fromtimestamp(result['timestamp'])
            message += f"üïê *C·∫≠p nh·∫≠t:* {timestamp.strftime('%H:%M:%S %d/%m/%Y')}"
        except:
            message += f"üïê *C·∫≠p nh·∫≠t:* {result.get('timestamp', 'N/A')}"

        return message

    def get_trading_suggestion(self, smc, indicators, trading_signals):
        """ƒê∆∞a ra g·ª£i √Ω trading chi ti·∫øt - v·ªõi error handling"""
        suggestions = []

        try:
            rsi = indicators.get('rsi', 50)

            # RSI analysis
            if rsi > 70:
                suggestions.append("‚ö†Ô∏è C√¢n nh·∫Øc b√°n")
            elif rsi < 30:
                suggestions.append("üöÄ C√¢n nh·∫Øc mua")

            # SMC analysis
            if smc.get('break_of_structure') and len(smc['break_of_structure']) > 0:
                latest_bos = smc['break_of_structure'][-1]
                if latest_bos.get('type') == 'bullish_bos':
                    suggestions.append("üìà Xu h∆∞·ªõng tƒÉng")
                elif latest_bos.get('type') == 'bearish_bos':
                    suggestions.append("üìâ Xu h∆∞·ªõng gi·∫£m")

            # FVG analysis
            if smc.get('fair_value_gaps'):
                fvg_count = len([fvg for fvg in smc['fair_value_gaps'] if not fvg.get('filled', True)])
                if fvg_count > 2:
                    suggestions.append(f"üéØ Ch·ªù retest")

            # Trading signals
            if trading_signals:
                entry_long = trading_signals.get('entry_long', [])
                entry_short = trading_signals.get('entry_short', [])

                if entry_long:
                    suggestions.append("üü¢ Signal Long xu·∫•t hi·ªán")
                if entry_short:
                    suggestions.append("üî¥ Signal Short xu·∫•t hi·ªán")

            if not suggestions:
                suggestions.append("‚è∏Ô∏è Th·ªã tr∆∞·ªùng sideways - Ch·ªù breakout")

        except Exception as e:
            logger.error(f"Error in get_trading_suggestion: {e}")
            suggestions.append("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch - Ki·ªÉm tra l·∫°i d·ªØ li·ªáu")

        return "\n".join([f"‚Ä¢ {s}" for s in suggestions])

    async def show_main_menu(self, query):
        """Hi·ªÉn th·ªã menu ch√≠nh"""
        keyboard = [
            [InlineKeyboardButton("üìä Ph√¢n t√≠ch BTC/USDT", callback_data='analyze_BTC/USDT')],
            [InlineKeyboardButton("üìà Ph√¢n t√≠ch ETH/USDT", callback_data='analyze_ETH/USDT')],
            [InlineKeyboardButton("üîç Ch·ªçn c·∫∑p kh√°c", callback_data='select_pair')],
            [InlineKeyboardButton("‚ÑπÔ∏è H∆∞·ªõng d·∫´n", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = """
üöÄ **Trading Bot SMC**

**C√°c t√≠nh nƒÉng:**
‚Ä¢ üìä Order Blocks Analysis
‚Ä¢ üéØ Fair Value Gaps Detection
‚Ä¢ üìà Break of Structure Signals
‚Ä¢ üíß Liquidity Zones Mapping
‚Ä¢ üîî Entry/Exit Signals

Ch·ªçn c·∫∑p ƒë·ªÉ ph√¢n t√≠ch:
        """

        await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_pair_selection(self, query):
        """Hi·ªÉn th·ªã menu ch·ªçn c·∫∑p trading v·ªõi nhi·ªÅu t√πy ch·ªçn h∆°n"""
        keyboard = [
            [InlineKeyboardButton("‚Çø BTC/USDT", callback_data='pair_BTC/USDT'),
             InlineKeyboardButton("Œû ETH/USDT", callback_data='pair_ETH/USDT')],
            [InlineKeyboardButton("BNB/USDT", callback_data='pair_BNB/USDT'),
             InlineKeyboardButton("WLD/USDT", callback_data='pair_WLD/USDT')],
            [InlineKeyboardButton("SOL/USDT", callback_data='pair_SOL/USDT'),
             InlineKeyboardButton("SEI/USDT", callback_data='pair_SEI/USDT')],
            [InlineKeyboardButton("BNB/USDT", callback_data='pair_BNB/USDT'),
             InlineKeyboardButton("AGT/USDT", callback_data='pair_AGT/USDT')],
            [InlineKeyboardButton("PEPE/USDT ", callback_data='pair_PEPE/USDT'),
             InlineKeyboardButton("SUI/USDT", callback_data='pair_SUI/USDT')],
            [InlineKeyboardButton("LINK/USDT ", callback_data='pair_LINK/USDT'),
             InlineKeyboardButton("DOGE/USDT", callback_data='pair_DOGE/USDT')],
            [InlineKeyboardButton("‚úèÔ∏è Nh·∫≠p c·∫∑p giao d·ªãch mong mu·ªën", callback_data='input_pair')],
            [InlineKeyboardButton("üè† Quay l·∫°i", callback_data='start')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üìä **Ch·ªçn c·∫∑p trading ƒë·ªÉ ph√¢n t√≠ch:**",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def show_help(self, query):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
        help_text = """
üìñ **H∆∞·ªõng d·∫´n Trading Bot SMC**

**Smart Money Concepts:**

üéØ **Order Blocks (OB):** 
‚Ä¢ Khu v·ª±c m√† smart money ƒë·∫∑t l·ªánh l·ªõn
‚Ä¢ Bullish OB: N·∫øn gi·∫£m tr∆∞·ªõc BOS tƒÉng
‚Ä¢ Bearish OB: N·∫øn tƒÉng tr∆∞·ªõc BOS gi·∫£m

üìà **Fair Value Gap (FVG):**
‚Ä¢ Kho·∫£ng tr·ªëng gi√° tr√™n chart
‚Ä¢ Th∆∞·ªùng ƒë∆∞·ª£c "fill" l·∫°i b·ªüi gi√°
‚Ä¢ Signal entry khi retest FVG

üîÑ **Break of Structure (BOS):**
‚Ä¢ Ph√° v·ª° m·ª©c swing high/low tr∆∞·ªõc ƒë√≥
‚Ä¢ X√°c nh·∫≠n thay ƒë·ªïi xu h∆∞·ªõng
‚Ä¢ Bullish BOS: Ph√° swing high
‚Ä¢ Bearish BOS: Ph√° swing low

üíß **Liquidity Zones:**
‚Ä¢ Khu v·ª±c c√≥ thanh kho·∫£n cao
‚Ä¢ Smart money th∆∞·ªùng qu√©t thanh kho·∫£n
‚Ä¢ BSL: Buy Side Liquidity (tr√™n)
‚Ä¢ SSL: Sell Side Liquidity (d∆∞·ªõi)

üîî **Trading Signals:**
‚Ä¢ Entry Long: BOS tƒÉng + POI tƒÉng + Swept
‚Ä¢ Entry Short: BOS gi·∫£m + POI gi·∫£m + Swept
‚Ä¢ Exit: CHoCH ng∆∞·ª£c chi·ªÅu

‚ö†Ô∏è **L∆∞u √Ω:** 
ƒê√¢y l√† c√¥ng c·ª• h·ªó tr·ª£ ph√¢n t√≠ch, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞. Lu√¥n qu·∫£n l√Ω r·ªßi ro v√† DYOR.
        """
        keyboard = [[InlineKeyboardButton("üè† Quay l·∫°i Menu", callback_data='start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler cho command /analysis"""
        if context.args:
            symbol = context.args[0].upper()
            timeframe = context.args[1] if len(context.args) > 1 else '4h'

            await update.message.reply_text(f"üîÑ ƒêang ph√¢n t√≠ch {symbol} {timeframe}...")

            result = self.smc_analyzer.get_trading_signals(symbol, timeframe)
            if result:
                message = self.format_analysis_message(result)
                # build keyboard with track/untrack
                chat_id = update.message.chat_id
                reply_markup = self.build_reply_markup(symbol, timeframe, chat_id)
                await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch c·∫∑p n√†y.")
        else:
            await update.message.reply_text("C√°ch s·ª≠ d·ª•ng: /analysis BTC/USDT 4h")

    # -------------------------
    # Start tracking from a callback (pin message and add job) - updated for pinned editing + max 3
    # -------------------------
    async def _start_tracking_from_callback(self, query, context, symbol: str, timeframe: str):
        chat_id = query.message.chat_id
        message_id = query.message.message_id

        # Ensure tracked_pairs structure for this chat exists
        if chat_id not in self.tracked_pairs:
            self.tracked_pairs[chat_id] = {}

        # Enforce max 3 per chat
        if symbol not in self.tracked_pairs[chat_id] and len(self.tracked_pairs[chat_id]) >= self.MAX_TRACKS_PER_CHAT:
            await query.edit_message_text(f"‚ö†Ô∏è You can track up to {self.MAX_TRACKS_PER_CHAT} pairs. Please stop one before adding another.")
            return

        # If symbol already tracked, cancel old job first (we'll replace)
        if symbol in self.tracked_pairs[chat_id]:
            try:
                self.tracked_pairs[chat_id][symbol]['job'].schedule_removal()
            except Exception:
                pass

        # Create job: run every 30 minutes, first run in 1800s (so we don't immediately duplicate)
        job = self.application.job_queue.run_repeating(
            self.send_auto_analysis,
            interval=1800,  # 30 minutes
            first=1800,
            chat_id=chat_id,
            name=f"autotrack_{chat_id}_{symbol}",
            data={"symbol": symbol, "timeframe": timeframe}
        )

        # Pin the current message (if bot has permission) and save pinned_message_id
        pinned_id = None
        try:
            await self.application.bot.pin_chat_message(chat_id=chat_id, message_id=message_id, disable_notification=True)
            pinned_id = message_id
        except Exception as e:
            logger.warning(f"Cannot pin message: {e}")
            pinned_id = None

        # save
        self.tracked_pairs[chat_id][symbol] = {"job": job, "pinned_message_id": pinned_id, "timeframe": timeframe, "created_at": time.time()}

        # update the button to show "Stop Tracking"
        reply_markup = self.build_reply_markup(symbol, timeframe, chat_id)
        try:
            await query.edit_message_text("‚úÖ Tracking enabled. This message has been pinned (if bot has permission). It will be auto-updated.", reply_markup=reply_markup)
        except Exception:
            await context.bot.send_message(chat_id, f"‚úÖ Tracking enabled for {symbol} {timeframe} (30 minutes interval).")

    # -------------------------
    # Stop tracking from callback (unpin & cancel job)
    # -------------------------
    async def _stop_tracking_from_callback(self, query, context, symbol: str):
        chat_id = query.message.chat_id

        if chat_id in self.tracked_pairs and symbol in self.tracked_pairs[chat_id]:
            info = self.tracked_pairs[chat_id].pop(symbol)
            try:
                info['job'].schedule_removal()
            except Exception:
                pass

            # unpin if pinned
            pinned_id = info.get('pinned_message_id')
            if pinned_id:
                try:
                    await self.application.bot.unpin_chat_message(chat_id=chat_id, message_id=pinned_id)
                except Exception as e:
                    logger.warning(f"Cannot unpin message: {e}")

            # update keyboard: show Track button again
            reply_markup = self.build_reply_markup(symbol, info.get('timeframe', '4h'), chat_id)
            try:
                await query.edit_message_text(f"üõë ƒê√£ d·ª´ng theo d√µi {symbol}.", reply_markup=reply_markup)
            except Exception:
                await context.bot.send_message(chat_id, f"üõë ƒê√£ d·ª´ng theo d√µi {symbol}.")
        else:
            await query.answer(text=f"{symbol} ch∆∞a ƒë∆∞·ª£c theo d√µi.", show_alert=True)

    # -------------------------
    # Text handler to accept "Nh·∫≠p c·∫∑p" input
    # -------------------------
    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # If user clicked "input_pair" earlier, user_data will contain awaiting_pair=True
        if context.user_data.get('awaiting_pair'):
            context.user_data['awaiting_pair'] = False
            text = update.message.text.strip()
            parts = text.split()
            symbol = parts[0].upper()
            timeframe = parts[1] if len(parts) > 1 else '4h'
            # basic normalization: allow user to send BTC_USDT or BTC/USDT
            symbol = symbol.replace('_', '/')
            # present analysis as a new message
            await update.message.reply_text(f"üîÑ ƒêang ph√¢n t√≠ch {symbol} {timeframe}...")
            result = self.smc_analyzer.get_trading_signals(symbol, timeframe)
            if result:
                message = self.format_analysis_message(result)
                # build keyboard with track button
                chat_id = update.message.chat_id
                reply_markup = self.build_reply_markup(symbol, timeframe, chat_id)
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch c·∫∑p n√†y.")
            return

        # else ignore or handle general messages
        return

    def run(self):
        """Ch·∫°y bot"""
        # T·∫°o application
        self.application = Application.builder().token(self.token).build()

        # Th√™m handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("analysis", self.analysis_command))
        self.application.add_handler(CommandHandler("autotrack", self.auto_track_command))
        self.application.add_handler(CommandHandler("stoptrack", self.stop_track_command))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        # message handler for "Enter pair" flow
        self.application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.text_handler))

        # Ch·∫°y bot
        print("ü§ñ Bot ƒëang ch·∫°y...")
        self.application.run_polling()

if __name__ == "__main__":
    # Thay YOUR_BOT_TOKEN b·∫±ng token th·ª±c c·ªßa bot
    BOT_TOKEN = "7583449238:AAGWeKnbBqX1B1FB3MD3U_wR6xvphMG2gFw"
    bot = TradingBot(BOT_TOKEN)
    bot.run()
