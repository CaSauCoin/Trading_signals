import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.error import Conflict, TimedOut, NetworkError
from AdvancedSMC import AdvancedSMC
import json
import os
import time
import signal
import sys
import re

# C·∫•u h√¨nh logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class TradingBot:
    def __init__(self, token):
        self.token = token
        self.smc_analyzer = AdvancedSMC()
        self.application = None
        self.is_running = False
        # State management cho custom input
        self.user_states = {}
        
    def signal_handler(self, signum, frame):
        """Handle shutdown signals"""
        logger.info("Received shutdown signal, stopping bot...")
        self.is_running = False
        if self.application:
            asyncio.create_task(self.application.stop())
        sys.exit(0)
        
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle errors globally"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        # Handle specific errors
        if isinstance(context.error, Conflict):
            logger.error("Bot conflict detected - another instance might be running")
            await asyncio.sleep(10)
        elif isinstance(context.error, (TimedOut, NetworkError)):
            logger.error("Network error, retrying...")
            await asyncio.sleep(5)
        
        # Try to inform user about the error
        if update and hasattr(update, 'effective_chat') and update.effective_chat:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau."
                )
            except Exception as e:
                logger.error(f"Could not send error message to user: {e}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler cho command /start"""
        try:
            # Reset user state
            user_id = update.effective_user.id
            self.user_states[user_id] = {"waiting_for": None}
            
            keyboard = [
                [InlineKeyboardButton("üìä Ph√¢n t√≠ch BTC/USDT", callback_data='analyze_BTC/USDT')],
                [InlineKeyboardButton("üìà Ph√¢n t√≠ch ETH/USDT", callback_data='analyze_ETH/USDT')],
                [InlineKeyboardButton("üîç Ch·ªçn c·∫∑p c√≥ s·∫µn", callback_data='select_pair')],
                [InlineKeyboardButton("‚úèÔ∏è Nh·∫≠p token t√πy ch·ªânh", callback_data='custom_token')],
                [InlineKeyboardButton("‚ÑπÔ∏è H∆∞·ªõng d·∫´n", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = """
üöÄ **Trading Bot SMC!**

Ch·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu:

üí° **M·ªõi:** B·∫°n c√≥ th·ªÉ nh·∫≠p b·∫•t k·ª≥ token n√†o tr√™n Binance!
            """
            
            await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in start_command: {e}")
            await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i /start")

    async def text_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler cho tin nh·∫Øn text - x·ª≠ l√Ω custom token input"""
        user_id = update.effective_user.id
        user_state = self.user_states.get(user_id, {})
        
        if user_state.get("waiting_for") == "custom_token":
            await self.process_custom_token(update, context)
        else:
            # N·∫øu kh√¥ng trong state ƒë·∫∑c bi·ªát, c√≥ th·ªÉ l√† l·ªánh tr·ª±c ti·∫øp
            text = update.message.text.upper().strip()
            
            # Ki·ªÉm tra format TOKEN/USDT ho·∫∑c TOKEN
            if re.match(r'^[A-Z0-9]+(/USDT)?$', text):
                if not text.endswith('/USDT'):
                    text += '/USDT'
                await self.analyze_custom_token(update, text)
            else:
                await update.message.reply_text(
                    "‚ùì T√¥i kh√¥ng hi·ªÉu l·ªánh n√†y.\n"
                    "G·ª≠i /start ƒë·ªÉ xem menu ho·∫∑c g·ª≠i t√™n token (VD: BTC ho·∫∑c BTC/USDT)"
                )

    async def process_custom_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω token t√πy ch·ªânh ƒë∆∞·ª£c nh·∫≠p"""
        user_id = update.effective_user.id
        token_input = update.message.text.upper().strip()
        
        # Reset state
        self.user_states[user_id] = {"waiting_for": None}
        
        # Validate v√† format token
        if re.match(r'^[A-Z0-9]+$', token_input):
            symbol = f"{token_input}/USDT"
        elif re.match(r'^[A-Z0-9]+/USDT$', token_input):
            symbol = token_input
        else:
            await update.message.reply_text(
                "‚ùå **Format token kh√¥ng h·ª£p l·ªá!**\n\n"
                "‚úÖ **V√≠ d·ª• h·ª£p l·ªá:**\n"
                "‚Ä¢ BTC\n"
                "‚Ä¢ BTC/USDT\n"
                "‚Ä¢ PEPE\n"
                "‚Ä¢ DOGE/USDT\n\n"
                "Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c /start ƒë·ªÉ quay v·ªÅ menu.",
                parse_mode='Markdown'
            )
            return
        
        await self.analyze_custom_token(update, symbol)

    async def analyze_custom_token(self, update, symbol):
        """Ph√¢n t√≠ch token t√πy ch·ªânh"""
        # Ki·ªÉm tra xem symbol c√≥ t·ªìn t·∫°i tr√™n Binance kh√¥ng
        if not await self.validate_binance_symbol(symbol):
            suggestions = await self.get_similar_tokens(symbol)
            error_msg = f"‚ùå **Token {symbol} kh√¥ng t·ªìn t·∫°i tr√™n Binance!**\n\n"
            
            if suggestions:
                error_msg += "üí° **C√≥ th·ªÉ b·∫°n mu·ªën t√¨m:**\n"
                for suggestion in suggestions[:5]:
                    error_msg += f"‚Ä¢ {suggestion}\n"
                error_msg += "\nüìù Nh·∫≠p ch√≠nh x√°c t√™n token ho·∫∑c /start ƒë·ªÉ quay v·ªÅ menu."
            else:
                error_msg += "üìù Vui l√≤ng ki·ªÉm tra l·∫°i t√™n token ho·∫∑c /start ƒë·ªÉ quay v·ªÅ menu."
            
            await update.message.reply_text(error_msg, parse_mode='Markdown')
            return
        
        # Hi·ªÉn th·ªã keyboard timeframes cho token h·ª£p l·ªá
        keyboard = [
            [InlineKeyboardButton("üìä 15m", callback_data=f'tf_{symbol.replace("/", "_")}_15m'),
             InlineKeyboardButton("üìä 1h", callback_data=f'tf_{symbol.replace("/", "_")}_1h'),
             InlineKeyboardButton("üìä 4h", callback_data=f'tf_{symbol.replace("/", "_")}_4h')],
            [InlineKeyboardButton("üìä 1d", callback_data=f'tf_{symbol.replace("/", "_")}_1d'),
             InlineKeyboardButton("üìä 3d", callback_data=f'tf_{symbol.replace("/", "_")}_3d'),
             InlineKeyboardButton("üìä 1w", callback_data=f'tf_{symbol.replace("/", "_")}_1w')],
            [InlineKeyboardButton("üè† Menu ch√≠nh", callback_data='start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ **Token {symbol} h·ª£p l·ªá!**\n\n"
            f"üìä Ch·ªçn timeframe ƒë·ªÉ ph√¢n t√≠ch:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def validate_binance_symbol(self, symbol):
        """Ki·ªÉm tra symbol c√≥ t·ªìn t·∫°i tr√™n Binance kh√¥ng"""
        try:
            # S·ª≠ d·ª•ng SMC analyzer ƒë·ªÉ ki·ªÉm tra
            test_result = await asyncio.wait_for(
                asyncio.to_thread(self.smc_analyzer.get_trading_signals, symbol, '1h'),
                timeout=10.0
            )
            return test_result is not None
        except Exception as e:
            logger.error(f"Error validating symbol {symbol}: {e}")
            return False

    async def get_similar_tokens(self, symbol):
        """T√¨m c√°c token t∆∞∆°ng t·ª±"""
        common_tokens = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT', 'XRP/USDT',
            'DOGE/USDT', 'AVAX/USDT', 'DOT/USDT', 'LTC/USDT', 'LINK/USDT', 'UNI/USDT',
            'ATOM/USDT', 'MATIC/USDT', 'FTT/USDT', 'NEAR/USDT', 'ALGO/USDT', 'VET/USDT',
            'TRX/USDT', 'FIL/USDT', 'MANA/USDT', 'SAND/USDT', 'CRV/USDT', 'SUSHI/USDT',
            'COMP/USDT', 'MKR/USDT', 'AAVE/USDT', 'SNX/USDT', 'YFI/USDT', 'BAL/USDT',
            'PEPE/USDT', 'SHIB/USDT', 'WLD/USDT', 'SEI/USDT', 'SUI/USDT', 'ARB/USDT',
            'OP/USDT', 'APT/USDT', 'STX/USDT', 'INJ/USDT', 'TIA/USDT', 'JUP/USDT'
        ]
        
        # T√¨m tokens c√≥ ch·ª©a t·ª´ kh√≥a
        token_base = symbol.replace('/USDT', '').upper()
        suggestions = []
        
        for token in common_tokens:
            if token_base in token or any(char in token_base for char in token.replace('/USDT', '')):
                suggestions.append(token)
        
        return suggestions[:10]
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler cho c√°c n√∫t inline v·ªõi error handling"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        try:
            await query.answer()
            
            # Reset user state khi click button
            self.user_states[user_id] = {"waiting_for": None}
            
            if query.data.startswith('analyze_'):
                symbol = query.data.replace('analyze_', '')
                await self.send_analysis(query, symbol, '4h')
            elif query.data == 'select_pair':
                await self.show_pair_selection(query)
            elif query.data == 'custom_token':
                await self.show_custom_token_input(query)
            elif query.data == 'help':
                await self.show_help(query)
            elif query.data == 'start':
                await self.show_main_menu(query)
            elif query.data.startswith('pair_'):
                symbol = query.data.replace('pair_', '')
                await self.send_analysis(query, symbol, '4h')
            elif query.data.startswith('tf_'):
                parts = query.data.replace('tf_', '').split('_')
                if len(parts) >= 2:
                    symbol = '_'.join(parts[:-1]).replace('_', '/')
                    timeframe = parts[-1]
                    await self.send_analysis(query, symbol, timeframe)
                    
        except Exception as e:
            logger.error(f"Error in button_handler: {e}")
            try:
                await query.edit_message_text("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")
            except:
                pass

    async def show_custom_token_input(self, query):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n nh·∫≠p token t√πy ch·ªânh"""
        user_id = query.from_user.id
        self.user_states[user_id] = {"waiting_for": "custom_token"}
        
        keyboard = [[InlineKeyboardButton("üîô Quay l·∫°i", callback_data='start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        instruction_text = """
‚úèÔ∏è **NH·∫¨P TOKEN T√ôY CH·ªàNH**

üìù **C√°ch nh·∫≠p:**
‚Ä¢ Ch·ªâ t√™n token: `BTC`, `PEPE`, `DOGE`
‚Ä¢ Ho·∫∑c full pair: `BTC/USDT`, `PEPE/USDT`

üí° **V√≠ d·ª•:**
‚Ä¢ `PEPE` ‚Üí s·∫Ω ph√¢n t√≠ch PEPE/USDT
‚Ä¢ `WLD/USDT` ‚Üí s·∫Ω ph√¢n t√≠ch WLD/USDT
‚Ä¢ `1000SATS` ‚Üí s·∫Ω ph√¢n t√≠ch 1000SATS/USDT

‚ö†Ô∏è **L∆∞u √Ω:**
‚Ä¢ Ch·ªâ h·ªó tr·ª£ tokens tr√™n Binance
‚Ä¢ Ch·ªâ pair v·ªõi USDT

**Nh·∫≠p t√™n token b√¢y gi·ªù:**
        """
        
        await query.edit_message_text(
            instruction_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def send_analysis(self, query, symbol, timeframe='4h'):
        """G·ª≠i ph√¢n t√≠ch SMC v·ªõi error handling improved"""
        try:
            await query.edit_message_text("üîÑ ƒêang ph√¢n t√≠ch... Vui l√≤ng ƒë·ª£i...")
            
            # Timeout cho vi·ªác l·∫•y d·ªØ li·ªáu
            result = await asyncio.wait_for(
                asyncio.to_thread(self.smc_analyzer.get_trading_signals, symbol, timeframe),
                timeout=30.0
            )
            
            if result is None:
                await query.edit_message_text(
                    f"‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho {symbol}.\n"
                    f"Token c√≥ th·ªÉ kh√¥ng t·ªìn t·∫°i tr√™n Binance ho·∫∑c kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu.\n\n"
                    f"Vui l√≤ng th·ª≠ token kh√°c ho·∫∑c /start ƒë·ªÉ quay v·ªÅ menu."
                )
                return
            
            # Format message
            message = self.format_analysis_message(result)
            
            # Create keyboard
            symbol_encoded = symbol.replace('/', '_')
            keyboard = [
                [InlineKeyboardButton("üìä 15m", callback_data=f'tf_{symbol_encoded}_15m'),
                 InlineKeyboardButton("üìä 1h", callback_data=f'tf_{symbol_encoded}_1h'),
                 InlineKeyboardButton("üìä 4h", callback_data=f'tf_{symbol_encoded}_4h')],
                [InlineKeyboardButton("üìä 1d", callback_data=f'tf_{symbol_encoded}_1d'),
                 InlineKeyboardButton("üìä 3d", callback_data=f'tf_{symbol_encoded}_3d'),
                 InlineKeyboardButton("üìä 1w", callback_data=f'tf_{symbol_encoded}_1w')],
                [InlineKeyboardButton("üîÑ Refresh", callback_data=f'tf_{symbol_encoded}_{timeframe}'),
                 InlineKeyboardButton("‚úèÔ∏è Token kh√°c", callback_data='custom_token'),
                 InlineKeyboardButton("üè† Menu", callback_data='start')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # Send message with fallback
            try:
                await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Markdown parse error: {e}")
                plain_message = message.replace('*', '').replace('_', '')
                await query.edit_message_text(plain_message, reply_markup=reply_markup)
        
        except asyncio.TimeoutError:
            await query.edit_message_text("‚è∞ Timeout - Ph√¢n t√≠ch m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.")
        except Exception as e:
            logger.error(f"Error in send_analysis: {e}")
            error_msg = f"‚ùå L·ªói khi ph√¢n t√≠ch {symbol}: {str(e)[:100]}..."
            await query.edit_message_text(error_msg)

    def format_analysis_message(self, result):
        """Format k·∫øt qu·∫£ ph√¢n t√≠ch th√†nh message Telegram v·ªõi th√¥ng tin chi ti·∫øt"""
        smc = result['smc_analysis']
        indicators = result['indicators']
        trading_signals = result.get('trading_signals', {})
        # entry = result.get('entry', None)
        # exit = result.get('exit', None)

        # Header
        message = f"üìä *Ph√¢n t√≠ch {result['symbol']} - {result['timeframe']}*\n\n"
        
        # Price info
        message += f"üí∞ *Gi√° hi·ªán t·∫°i:* ${result['current_price']:,.2f}\n"
        
        # Indicators
        rsi = indicators.get('rsi', 50)
        rsi_emoji = "üü¢" if rsi < 30 else ("üî¥" if rsi > 70 else "üü°")
        message += f"üìà *RSI:* {rsi_emoji} {rsi:.1f}\n"
        message += f"üìä *Gi√° s√°t:* ${indicators.get('sma_20', 0):,.2f}\n"
        message += f"üìâ *Gi√° d·ª± t·ªët:* ${indicators.get('ema_20', 0):,.2f}\n\n"
        
        # Price change
        price_change = indicators.get('price_change_pct', 0)
        change_emoji = "üìà" if price_change > 0 else "üìâ"
        message += f"{change_emoji} *Thay ƒë·ªïi:* {price_change:+.2f}%\n\n"
        
        # SMC Analysis - Detailed
        message += "üîç *ANALYSIS:*\n"
        
        # Order Blocks
        ob_count = len(smc['order_blocks'])
        message += f"üì¶ *Order Blocks:* {ob_count}\n"
        if ob_count > 0:
            try:
                latest_ob = smc['order_blocks'][-1]
                ob_emoji = "üü¢" if latest_ob['type'] == 'bullish_ob' else "üî¥"
                ob_type = latest_ob['type'].replace('_', ' ').upper()
                # message += f"   {ob_emoji} G·∫ßn nh·∫•t: {ob_type}\n"
                
                # Ki·ªÉm tra gi√° tr·ªã kh√¥ng ph·∫£i None
                if latest_ob.get('low') is not None and latest_ob.get('high') is not None:
                    # message += f"   üìç Level: ${latest_ob['low']:,.0f} - ${latest_ob['high']:,.0f}\n"
                    print(f"Order Block: {latest_ob}")  # Debug log
            except (KeyError, TypeError, IndexError):
                print("D·ªØ li·ªáu OB kh√¥ng ƒë·∫ßy ƒë·ªß")
    
        # Fair Value Gaps
        fvg_count = len(smc['fair_value_gaps'])
        # message += f"üéØ *Fair Value Gaps:* {fvg_count}\n"
        if fvg_count > 0:
            try:
                latest_fvg = smc['fair_value_gaps'][-1]
                fvg_emoji = "üü¢" if latest_fvg['type'] == 'bullish_fvg' else "üî¥"
                fvg_type = latest_fvg['type'].replace('_', ' ').upper()
                # message += f"   {fvg_emoji} G·∫ßn nh·∫•t: {fvg_type}\n"
                
                # Ki·ªÉm tra gi√° tr·ªã kh√¥ng ph·∫£i None
                if latest_fvg.get('top') is not None and latest_fvg.get('bottom') is not None:
                    print(f"Fair Value Gap: {latest_fvg}")  # Debug log
                    # message += f"   üìç Gap: ${latest_fvg['bottom']:,.0f} - ${latest_fvg['top']:,.0f}\n"
            except (KeyError, TypeError, IndexError):
                print("D·ªØ li·ªáu FVG kh√¥ng ƒë·∫ßy ƒë·ªß")
                # message += "   ‚ö†Ô∏è D·ªØ li·ªáu FVG kh√¥ng ƒë·∫ßy ƒë·ªß\n"
    
        # Break of Structure
        bos_count = len(smc['break_of_structure'])
        message += f"üîÑ *Structure:* {bos_count}\n"
        if bos_count > 0:
            try:
                latest_bos = smc['break_of_structure'][-1]
                bos_emoji = "üü¢" if latest_bos['type'] == 'bullish_bos' else "üî¥"
                bos_type = latest_bos['type'].replace('_', ' ').upper()
                message += f"   {bos_emoji} G·∫ßn nh·∫•t: {bos_type}\n"
                message += f"   üìç Price: ${latest_bos['price']:,.2f}\n"
            except (KeyError, TypeError, IndexError):
                print("D·ªØ li·ªáu BOS kh√¥ng ƒë·∫ßy ƒë·ªß")
                # message += "   ‚ö†Ô∏è D·ªØ li·ªáu BOS kh√¥ng ƒë·∫ßy ƒë·ªß\n"
    
        # Liquidity Zones
        lz_count = len(smc['liquidity_zones'])
        message += f"üíß *Liquidity Zones:* {lz_count}\n"
        if lz_count > 0:
            try:
                latest_lz = smc['liquidity_zones'][-1]
                lz_emoji = "üîµ" if latest_lz['type'] == 'buy_side_liquidity' else "üü†"
                lz_type = latest_lz['type'].replace('_', ' ').title()
                message += f"   {lz_emoji} G·∫ßn nh·∫•t: {lz_type}\n"
                message += f"   üìç Level: ${latest_lz['price']:,.2f}\n"
            except (KeyError, TypeError, IndexError):
                print("D·ªØ li·ªáu LZ kh√¥ng ƒë·∫ßy ƒë·ªß")

        message += "\n"
        
        # Trading Signals
        if trading_signals:
            message += "üîî *TRADING SIGNALS:*\n"
            
            # Entry signals
            entry_long = trading_signals.get('entry_long', [])
            entry_short = trading_signals.get('entry_short', [])
            exit_long = trading_signals.get('exit_long', [])
            exit_short = trading_signals.get('exit_short', [])
            
            try:
                if entry_long:
                    latest_long = entry_long[-1]
                    message += f"üü¢ *Long Signal:* ${latest_long['price']:,.2f}\n"
                    message += f"   üè∑Ô∏è Tag: {latest_long.get('tag', 'N/A')}\n"
                
                if entry_short:
                    latest_short = entry_short[-1]
                    message += f"üî¥ *Short Signal:* ${latest_short['price']:,.2f}\n"
                    message += f"   üè∑Ô∏è Tag: {latest_short.get('tag', 'N/A')}\n"
                
                if exit_long:
                    message += f"‚ùå *Exit Long:* {len(exit_long)} signals\n"
                
                if exit_short:
                    message += f"‚ùå *Exit Short:* {len(exit_short)} signals\n"
                
                if not any([entry_long, entry_short, exit_long, exit_short]):
                    message += "‚è∏Ô∏è Kh√¥ng c√≥ signal n√†o\n"
                    
            except (KeyError, TypeError, IndexError):
                message += "‚ö†Ô∏è D·ªØ li·ªáu signals kh√¥ng ƒë·∫ßy ƒë·ªß\n"
            
            message += "\n"
        
        # Trading suggestion (advanced)
        try:
            suggestion = self.get_trading_suggestion(smc, indicators, trading_signals)
            message += f"üí° *G·ª£i √Ω Trading:*\n{suggestion}\n\n"
        except Exception as e:
            message += "üí° *G·ª£i √Ω Trading:* Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω\n\n"
        
        # Timestamp
        try:
            from datetime import datetime
            timestamp = datetime.fromtimestamp(result['timestamp'])
            message += f"üïê *C·∫≠p nh·∫≠t:* {timestamp.strftime('%H:%M:%S %d/%m/%Y')}"
        except:
            message += f"üïê *C·∫≠p nh·∫≠t:* {result.get('timestamp', 'N/A')}"
        
        return message
    
    def get_trading_suggestion(self, smc, indicators, trading_signals):
        """ƒê∆∞a ra g·ª£i √Ω trading chi ti·∫øt - v·ªõi error handling"""
        suggestions = []
        
        try:
            rsi = indicators.get('rsi', 50)
            
            # RSI analysis
            if rsi > 70:
                suggestions.append("‚ö†Ô∏è C√¢n nh·∫Øc b√°n")
            elif rsi < 30:
                suggestions.append("üöÄ C√¢n nh·∫Øc mua")

            # SMC analysis
            if smc.get('break_of_structure') and len(smc['break_of_structure']) > 0:
                latest_bos = smc['break_of_structure'][-1]
                if latest_bos.get('type') == 'bullish_bos':
                    suggestions.append("üìà Xu h∆∞·ªõng tƒÉng")
                elif latest_bos.get('type') == 'bearish_bos':
                    suggestions.append("üìâ Xu h∆∞·ªõng gi·∫£m")
            
            # FVG analysis
            if smc.get('fair_value_gaps'):
                fvg_count = len([fvg for fvg in smc['fair_value_gaps'] if not fvg.get('filled', True)])
                if fvg_count > 2:
                    suggestions.append(f"üéØ Ch·ªù retest")
            
            # Trading signals
            if trading_signals:
                entry_long = trading_signals.get('entry_long', [])
                entry_short = trading_signals.get('entry_short', [])
                
                if entry_long:
                    suggestions.append("üü¢ Signal Long xu·∫•t hi·ªán")
                if entry_short:
                    suggestions.append("üî¥ Signal Short xu·∫•t hi·ªán")
            
            if not suggestions:
                suggestions.append("‚è∏Ô∏è Th·ªã tr∆∞·ªùng sideways - Ch·ªù breakout")
                
        except Exception as e:
            logger.error(f"Error in get_trading_suggestion: {e}")
            suggestions.append("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch - Ki·ªÉm tra l·∫°i d·ªØ li·ªáu")
        
        return "\n".join([f"‚Ä¢ {s}" for s in suggestions])

    async def show_main_menu(self, query):
        """Hi·ªÉn th·ªã menu ch√≠nh"""
        keyboard = [
            [InlineKeyboardButton("üìä Ph√¢n t√≠ch BTC/USDT", callback_data='analyze_BTC/USDT')],
            [InlineKeyboardButton("üìà Ph√¢n t√≠ch ETH/USDT", callback_data='analyze_ETH/USDT')],
            [InlineKeyboardButton("üîç Ch·ªçn c·∫∑p c√≥ s·∫µn", callback_data='select_pair')],
            [InlineKeyboardButton("‚úèÔ∏è Nh·∫≠p token t√πy ch·ªânh", callback_data='custom_token')],
            [InlineKeyboardButton("‚ÑπÔ∏è H∆∞·ªõng d·∫´n", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
üöÄ **Trading Bot SMC**

**C√°c t√≠nh nƒÉng:**
‚Ä¢ üìä Order Blocks Analysis
‚Ä¢ üéØ Fair Value Gaps Detection
‚Ä¢ üìà Break of Structure Signals
‚Ä¢ üíß Liquidity Zones Mapping
‚Ä¢ üîî Entry/Exit Signals

Ch·ªçn c·∫∑p ƒë·ªÉ ph√¢n t√≠ch:
        """
        
        await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def show_pair_selection(self, query):
        """Hi·ªÉn th·ªã menu ch·ªçn c·∫∑p trading v·ªõi nhi·ªÅu t√πy ch·ªçn h∆°n"""
        keyboard = [
            [InlineKeyboardButton("‚Çø BTC/USDT", callback_data='pair_BTC/USDT'),
             InlineKeyboardButton("Œû ETH/USDT", callback_data='pair_ETH/USDT')],
            [InlineKeyboardButton("üü° BNB/USDT", callback_data='pair_BNB/USDT'),
             InlineKeyboardButton("üîµ WLD/USDT", callback_data='pair_WLD/USDT')],
            [InlineKeyboardButton("üü£ SOL/USDT", callback_data='pair_SOL/USDT'),
             InlineKeyboardButton("üî¥ SEI/USDT", callback_data='pair_SEI/USDT')],
            [InlineKeyboardButton("üü† BNB/USDT", callback_data='pair_BNB/USDT'),
             InlineKeyboardButton("üü¢ AGT/USDT", callback_data='pair_AGT/USDT')],
            [InlineKeyboardButton("üü¢ PEPE/USDT ", callback_data='pair_PEPE/USDT'),
             InlineKeyboardButton("üü¢ SUI/USDT", callback_data='pair_SUI/USDT')],
            [InlineKeyboardButton("üè† Quay l·∫°i", callback_data='start')],

        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìä **Ch·ªçn c·∫∑p trading ƒë·ªÉ ph√¢n t√≠ch:**", 
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_help(self, query):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
        help_text = """
üìñ **H∆∞·ªõng d·∫´n Trading Bot SMC**

**Smart Money Concepts:**

üéØ **Order Blocks (OB):** 
‚Ä¢ Khu v·ª±c m√† smart money ƒë·∫∑t l·ªánh l·ªõn
‚Ä¢ Bullish OB: N·∫øn gi·∫£m tr∆∞·ªõc BOS tƒÉng
‚Ä¢ Bearish OB: N·∫øn tƒÉng tr∆∞·ªõc BOS gi·∫£m

üìà **Fair Value Gap (FVG):**
‚Ä¢ Kho·∫£ng tr·ªëng gi√° tr√™n chart
‚Ä¢ Th∆∞·ªùng ƒë∆∞·ª£c "fill" l·∫°i b·ªüi gi√°
‚Ä¢ Signal entry khi retest FVG

üîÑ **Break of Structure (BOS):**
‚Ä¢ Ph√° v·ª° m·ª©c swing high/low tr∆∞·ªõc ƒë√≥
‚Ä¢ X√°c nh·∫≠n thay ƒë·ªïi xu h∆∞·ªõng
‚Ä¢ Bullish BOS: Ph√° swing high
‚Ä¢ Bearish BOS: Ph√° swing low

üíß **Liquidity Zones:**
‚Ä¢ Khu v·ª±c c√≥ thanh kho·∫£n cao
‚Ä¢ Smart money th∆∞·ªùng qu√©t thanh kho·∫£n
‚Ä¢ BSL: Buy Side Liquidity (tr√™n)
‚Ä¢ SSL: Sell Side Liquidity (d∆∞·ªõi)

üîî **Trading Signals:**
‚Ä¢ Entry Long: BOS tƒÉng + POI tƒÉng + Swept
‚Ä¢ Entry Short: BOS gi·∫£m + POI gi·∫£m + Swept
‚Ä¢ Exit: CHoCH ng∆∞·ª£c chi·ªÅu

‚ö†Ô∏è **L∆∞u √Ω:** 
ƒê√¢y l√† c√¥ng c·ª• h·ªó tr·ª£ ph√¢n t√≠ch, kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞. Lu√¥n qu·∫£n l√Ω r·ªßi ro v√† DYOR.
        """
        
        keyboard = [[InlineKeyboardButton("üè† Quay l·∫°i Menu", callback_data='start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler cho command /analysis"""
        if context.args:
            symbol = context.args[0].upper()
            timeframe = context.args[1] if len(context.args) > 1 else '4h'
            
            await update.message.reply_text(f"üîÑ ƒêang ph√¢n t√≠ch {symbol} {timeframe}...")
            
            result = self.smc_analyzer.get_trading_signals(symbol, timeframe)
            if result:
                message = self.format_analysis_message(result)
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch c·∫∑p n√†y.")
        else:
            await update.message.reply_text("C√°ch s·ª≠ d·ª•ng: /analysis BTC/USDT 4h")
    
    def run(self):
        """Ch·∫°y bot v·ªõi error handling v√† graceful shutdown"""
        # Setup signal handlers
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        try:
            # T·∫°o application v·ªõi retry settings
            self.application = Application.builder()\
                .token(self.token)\
                .read_timeout(30)\
                .write_timeout(30)\
                .connect_timeout(30)\
                .pool_timeout(30)\
                .build()
            
            # Add error handler
            self.application.add_error_handler(self.error_handler)
            
            # Th√™m handlers
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("analysis", self.analysis_command))
            self.application.add_handler(CallbackQueryHandler(self.button_handler))
            # TH√äM TEXT HANDLER
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.text_handler))
            
            self.is_running = True
            
            # Ch·∫°y bot v·ªõi retry logic
            logger.info("ü§ñ Bot ƒëang kh·ªüi ƒë·ªông...")
            
            while self.is_running:
                try:
                    self.application.run_polling(
                        poll_interval=1.0,
                        timeout=30,
                        bootstrap_retries=3,
                        read_timeout=30,
                        write_timeout=30,
                        connect_timeout=30,
                        pool_timeout=30
                    )
                except Conflict as e:
                    logger.error(f"Bot conflict: {e}")
                    logger.info("Waiting 30 seconds before retry...")
                    time.sleep(30)
                except (TimedOut, NetworkError) as e:
                    logger.error(f"Network error: {e}")
                    logger.info("Waiting 10 seconds before retry...")
                    time.sleep(10)
                except Exception as e:
                    logger.error(f"Unexpected error: {e}")
                    logger.info("Waiting 15 seconds before retry...")
                    time.sleep(15)
                    
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
        except Exception as e:
            logger.error(f"Fatal error: {e}")
        finally:
            self.is_running = False
            if self.application:
                try:
                    asyncio.run(self.application.stop())
                except:
                    pass
            logger.info("Bot shutdown complete")

if __name__ == "__main__":
    # Ki·ªÉm tra token
    BOT_TOKEN = "7858582538:AAG4gosdOgbe7RsNb9nnYOMQJTohNSGcn6k"
    
    # Kh·ªüi ƒë·ªông bot
    bot = TradingBot(BOT_TOKEN)
    bot.run()
