# src/bot/handlers/callback_handlers.py
import logging
from telegram import Update, Message
from telegram.ext import CallbackContext
from telegram.error import BadRequest

from src.bot import constants as const
from src.bot import keyboards
from src.bot import formatters
from src.bot.utils.state_manager import set_user_state

logger = logging.getLogger(__name__)

# --- Reusable Function ---
def show_watchlist_menu(update: Update, context: CallbackContext):
    """
    Hi·ªÉn th·ªã menu qu·∫£n l√Ω watchlist. 
    H√†m n√†y c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª´ command ho·∫∑c callback.
    """
    query = update.callback_query
    user_id = update.effective_user.id
    scheduler_service = context.bot_data['scheduler_service']
    
    watchlist = scheduler_service.get_user_watchlist(user_id)
    keyboard = keyboards.create_watchlist_menu_keyboard(watchlist)
    text = "üëÅÔ∏è **Qu·∫£n l√Ω Watchlist**\n\nTheo d√µi c√°c token y√™u th√≠ch v√† nh·∫≠n th√¥ng b√°o t√≠n hi·ªáu t·ª± ƒë·ªông."
    
    # N·∫øu l√† t·ª´ n√∫t b·∫•m (callback), s·ª≠a tin nh·∫Øn c≈©
    if query:
        try:
            query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                logger.error(f"L·ªói khi s·ª≠a menu watchlist: {e}")
    # N·∫øu l√† t·ª´ l·ªánh g√µ (/watchlist), g·ª≠i tin nh·∫Øn m·ªõi
    else:
        update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')

# --- Main Router ---
def handle_callback(update: Update, context: CallbackContext):
    """B·ªô ƒë·ªãnh tuy·∫øn ch√≠nh cho t·∫•t c·∫£ c√°c callback query."""
    query = update.callback_query
    query.answer()
    
    parts = query.data.split(':', 3)
    action = parts[0]
    
    if action == const.CB_ANALYZE or action == const.CB_REFRESH:
        _, symbol, timeframe = parts
        perform_analysis(query.message, context, symbol, timeframe)
    elif action == const.CB_TIMEFRAME:
        _, symbol = parts
        handle_timeframe_selection(query, context, symbol)
    elif action == const.CB_WATCHLIST:
        handle_watchlist_router(update, context, parts)
    elif action == const.CB_BACK_MAIN:
        handle_back_to_main(query, context)
    elif action == const.CB_SELECT_PAIR:
        handle_select_pair(query, context)
    elif action == const.CB_CUSTOM_TOKEN:
        handle_custom_token(query, context)
    elif action == const.CB_HELP:
        show_help(query, context)
    else:
        query.edit_message_text("‚ö†Ô∏è T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...")

# --- Detailed Handlers ---

def perform_analysis(message: Message, context: CallbackContext, symbol: str, timeframe: str):
    """Th·ª±c hi·ªán ph√¢n t√≠ch v√† c·∫≠p nh·∫≠t tin nh·∫Øn."""
    message.edit_text(f"üîÑ **ƒêang ph√¢n t√≠ch {symbol} {timeframe}...**", parse_mode='Markdown')
    analysis_service = context.bot_data['analysis_service']
    result = analysis_service.get_analysis_for_symbol(symbol, timeframe)
    if result.get('error'):
        message.edit_text(f"‚ùå **L·ªói ph√¢n t√≠ch**\n\n{result.get('message')}", parse_mode='Markdown')
        return
    formatted_result = formatters.format_analysis_result(result)
    keyboard = keyboards.create_analysis_options_keyboard(symbol, timeframe)
    message.edit_text(formatted_result, reply_markup=keyboard, parse_mode='Markdown')

def handle_watchlist_router(update: Update, context: CallbackContext, parts: list):
    """ƒê·ªãnh tuy·∫øn c√°c h√†nh ƒë·ªông li√™n quan ƒë·∫øn watchlist."""
    query = update.callback_query
    sub_action = parts[1]
    user_id = query.from_user.id
    scheduler_service = context.bot_data['scheduler_service']

    if sub_action == 'menu':
        show_watchlist_menu(update, context)

    elif sub_action == 'view':
        watchlist = scheduler_service.get_user_watchlist(user_id)
        text = f"üìã **Watchlist c·ªßa b·∫°n ({len(watchlist)}/10):**\n\n"
        if not watchlist:
            text += "Watchlist c·ªßa b·∫°n ƒëang tr·ªëng."
        else:
            for i, item in enumerate(watchlist, 1):
                text += f"{i}. **{item['symbol']}** (Khung: {item['timeframe']})\n"
        
        keyboard = keyboards.create_watchlist_menu_keyboard(watchlist)
        query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

    elif sub_action == 'add_prompt':
        set_user_state(user_id, context, const.STATE_ADD_WATCHLIST)
        text = "‚ûï **Th√™m v√†o Watchlist**\n\nNh·∫≠p token v√† khung th·ªùi gian theo ƒë·ªãnh d·∫°ng:\n`TOKEN timeframe`\n\n*V√≠ d·ª•:*\n`PEPE 4h`\n`BTC/USDT 1d`"
        query.edit_message_text(text, parse_mode='Markdown')
        
    elif sub_action == 'add_direct':
        if len(parts) < 4:
            logger.error(f"Callback 'add_direct' kh√¥ng ƒë·ªß tham s·ªë: {query.data}")
            return
        _, _, symbol, timeframe = parts
        result = scheduler_service.add_to_watchlist(user_id, symbol, timeframe)
        query.answer(result['message'], show_alert=True)
        if result['success']:
            keyboard = keyboards.create_post_add_watchlist_keyboard()
            text = f"‚úÖ **Th√†nh c√¥ng!**\n\n{result['message']}\n\nB·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?"
            query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

    elif sub_action == 'remove_menu':
        watchlist = scheduler_service.get_user_watchlist(user_id)
        if not watchlist:
            query.answer("Watchlist c·ªßa b·∫°n ƒëang tr·ªëng!", show_alert=True)
            return
        keyboard = keyboards.create_remove_token_keyboard(watchlist)
        query.edit_message_text("üóëÔ∏è Ch·ªçn token b·∫°n mu·ªën x√≥a kh·ªèi watchlist:", reply_markup=keyboard, parse_mode='Markdown')
        
    elif sub_action == 'remove_confirm':
        if len(parts) < 4:
            logger.error(f"Callback 'remove_confirm' kh√¥ng ƒë·ªß tham s·ªë: {query.data}")
            return
        _, _, symbol, timeframe = parts
        success = scheduler_service.remove_from_watchlist(user_id, symbol, timeframe)
        if success:
            query.answer(f"ƒê√£ x√≥a {symbol} ({timeframe})", show_alert=True)
            show_watchlist_menu(update, context)
            
def handle_back_to_main(query, context: CallbackContext):
    """Quay v·ªÅ menu ch√≠nh."""
    keyboard = keyboards.create_main_menu_keyboard()
    try:
        query.edit_message_text(const.WELCOME_TEXT, reply_markup=keyboard, parse_mode='Markdown')
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            logger.error(f"L·ªói BadRequest kh√¥ng x√°c ƒë·ªãnh: {e}")

def handle_timeframe_selection(query, context, symbol):
    """Hi·ªÉn th·ªã menu ch·ªçn khung th·ªùi gian."""
    keyboard = keyboards.create_timeframe_selection_keyboard(symbol)
    query.edit_message_text(f"‚è±Ô∏è **Ch·ªçn khung th·ªùi gian cho {symbol}:**", reply_markup=keyboard, parse_mode='Markdown')
    
def handle_select_pair(query, context: CallbackContext):
    """Hi·ªÉn th·ªã menu ch·ªçn c·∫∑p token ph·ªï bi·∫øn."""
    keyboard = keyboards.create_popular_pairs_keyboard()
    query.edit_message_text("üîç **Ch·ªçn c·∫∑p Token ph·ªï bi·∫øn:**", reply_markup=keyboard, parse_mode='Markdown')

def handle_custom_token(query, context: CallbackContext):
    """Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p token t√πy ch·ªânh."""
    user_id = query.from_user.id
    set_user_state(user_id, context, const.STATE_CUSTOM_TOKEN)
    query.edit_message_text(
        "‚úèÔ∏è **Nh·∫≠p Token t√πy ch·ªânh**\n\nH√£y g·ª≠i t√™n token b·∫°n mu·ªën ph√¢n t√≠ch (v√≠ d·ª•: BTC, PEPE, SOL/USDT).",
        parse_mode='Markdown'
    )

def show_help(query, context: CallbackContext):
    """Hi·ªÉn th·ªã tin nh·∫Øn h∆∞·ªõng d·∫´n."""
    keyboard = keyboards.create_back_to_main_keyboard()
    query.edit_message_text(const.HELP_TEXT, reply_markup=keyboard, parse_mode='Markdown')