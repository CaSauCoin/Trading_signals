# src/bot/formatters.py
from . import constants as const
from datetime import datetime

def format_price(price: float) -> str:
    """
    ƒê·ªãnh d·∫°ng gi√° token m·ªôt c√°ch linh ho·∫°t:
    - N·∫øu gi√° > 10: L·∫•y 2 ch·ªØ s·ªë th·∫≠p ph√¢n (v√≠ d·ª•: $1,234.56)
    - N·∫øu 1 <= gi√° <= 10: L·∫•y 4 ch·ªØ s·ªë th·∫≠p ph√¢n (v√≠ d·ª•: $7.8912)
    - N·∫øu gi√° < 1: L·∫•y t·ªëi ƒëa 8 ch·ªØ s·ªë th·∫≠p ph√¢n ƒë·ªÉ hi·ªÉn th·ªã ƒë·ªß gi√° tr·ªã cho c√°c token si√™u nh·ªè (v√≠ d·ª•: $0.00000078)
    """
    if not isinstance(price, (int, float)) or price == 0:
        return "N/A"
    
    if price > 10:
        return f"${price:,.2f}"
    elif price >= 1:
        return f"${price:,.4f}"
    else:
        # D√πng .8f ƒë·ªÉ ƒë·∫£m b·∫£o c√°c s·ªë 0 quan tr·ªçng ƒë∆∞·ª£c hi·ªÉn th·ªã
        # Sau ƒë√≥ d√πng .rstrip('0').rstrip('.') ƒë·ªÉ x√≥a c√°c s·ªë 0 kh√¥ng c·∫ßn thi·∫øt ·ªü cu·ªëi
        formatted_str = f"{price:,.8f}"
        return f"${formatted_str.rstrip('0').rstrip('.')}"

def format_analysis_result(result: dict) -> str:
    """ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ph√¢n t√≠ch ƒë·ªÉ hi·ªÉn th·ªã."""
    if result.get('error'):
        return f"‚ùå **L·ªói:** {result.get('message')}"

    symbol = result.get('symbol', 'N/A')
    timeframe = result.get('timeframe', 'N/A')
    analysis = result.get('analysis', {})
    smc_data = analysis.get('smc_features', {})
    price = result.get('current_price', 0)
    indicators = result.get('indicators', {})
    
    signal = analysis.get('signal', 'CH·ªú')
    signal_emoji = const.EMOJI_SIGNAL_BUY if signal == 'MUA' else const.EMOJI_SIGNAL_SELL if signal == 'B√ÅN' else const.EMOJI_SIGNAL_NEUTRAL

    price_change = indicators.get('price_change_pct', 0)
    change_emoji = const.EMOJI_CHART_UP if price_change > 0 else const.EMOJI_CHART_DOWN if price_change < 0 else const.EMOJI_ARROW_RIGHT

    formatted_price = format_price(price)

    return f"""
üìä **Ph√¢n t√≠ch SMC: {symbol} ({timeframe})**

üí∞ **Gi√° hi·ªán t·∫°i:** {formatted_price} {change_emoji} {price_change:+.2f}%

{signal_emoji} **T√≠n hi·ªáu:** {signal}
üìà **ƒê·ªô tin c·∫≠y:** {analysis.get('confidence', 0)}%
üìâ **Xu h∆∞·ªõng:** {analysis.get('trend', 'N/A')}

üî≤ **Order Blocks:** {smc_data.get('order_blocks', {}).get('status', 'N/A')}
‚ö° **Fair Value Gaps:** {smc_data.get('fair_value_gaps', {}).get('status', 'N/A')}
üìä **Break of Structure:** {smc_data.get('break_of_structure', {}).get('status', 'N/A')}
üíß **Thanh kho·∫£n:** {smc_data.get('liquidity_zones', {}).get('status', 'N/A')}

üìä **RSI:** {indicators.get('rsi', 0):.1f}
üíπ **Volume 24h:** ${indicators.get('volume_24h', 0) * float(formatted_price.strip('$').replace(',', '')):,.0f}

‚è∞ **C·∫≠p nh·∫≠t l√∫c:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö†Ô∏è *Ch·ªâ mang t√≠nh tham kh·∫£o, kh√¥ng ph·∫£i l·ªùi khuy√™n t√†i ch√≠nh.*
    """.strip()