# src/bot/formatters.py
from datetime import datetime
import re  # C·∫ßn import th∆∞ vi·ªán re ƒë·ªÉ l·ªçc


def format_price(price: float) -> str:
    """ƒê·ªãnh d·∫°ng gi√° token m·ªôt c√°ch linh ho·∫°t."""
    if not isinstance(price, (int, float)) or price == 0:
        return "N/A"
    if price >= 1:
        return f"{price:,.2f}"
    else:
        # Hi·ªÉn th·ªã t·ªëi ƒëa 8 ch·ªØ s·ªë th·∫≠p ph√¢n, x√≥a c√°c s·ªë 0 ·ªü cu·ªëi
        return f"{price:,.8f}".rstrip('0').rstrip('.')


def _clean_suggestion(suggestion: str) -> str:
    """
    D·ªãch v√† ƒë∆°n gi·∫£n h√≥a c√°c thu·∫≠t ng·ªØ trong g·ª£i √Ω.
    X√≥a c√°c tham chi·∫øu ƒë·∫øn FVG v√† RSI theo y√™u c·∫ßu.
    """

    # 1. D·ªãch c√°c thu·∫≠t ng·ªØ ti·∫øng Anh ph·ªï bi·∫øn (B·∫°n c√≥ th·ªÉ th√™m v√†o ƒë√¢y)
    # ƒê√¢y l√† n∆°i b·∫°n d·ªãch c√°c chu·ªói m√† service c·ªßa b·∫°n c√≥ th·ªÉ tr·∫£ v·ªÅ
    replacements = {
        "Bullish trend": "Xu h∆∞·ªõng tƒÉng",
        "Bearish trend": "Xu h∆∞·ªõng gi·∫£m",
        "Wait for retest": "Ch·ªù retest",
        "Wait for confirmation": "Ch·ªù x√°c nh·∫≠n",
        "Long signal appeared": "T√≠n hi·ªáu Long xu·∫•t hi·ªán",
        "Short signal appeared": "T√≠n hi·ªáu Short xu·∫•t hi·ªán",
        "Consider entry": "Xem x√©t v√†o l·ªánh",
        "Look for Long": "T√¨m c∆° h·ªôi Long",
        "Look for Short": "T√¨m c∆° h·ªôi Short",
        "No suggestion available.": "Kh√¥ng c√≥ g·ª£i √Ω.",
        # Th√™m c√°c c·ª•m t·ª´ kh√°c m√† b·∫°n mu·ªën d·ªãch ·ªü ƒë√¢y...
    }

    for en, vi in replacements.items():
        suggestion = suggestion.replace(en, vi)

    # 2. X√≥a c√°c d√≤ng ch·ª©a FVG ho·∫∑c RSI
    # T√°ch g·ª£i √Ω th√†nh c√°c d√≤ng ri√™ng bi·ªát
    lines = suggestion.split('\n')

    # Gi·ªØ l·∫°i m·ªôt d√≤ng N·∫æU n√≥ KH√îNG ch·ª©a "FVG" v√† KH√îNG ch·ª©a "RSI"
    # re.IGNORECASE l√† ƒë·ªÉ t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng (v√≠ d·ª•: FVG, fvg, Rsi...)
    cleaned_lines = []
    for line in lines:
        if not re.search(r'FVG|RSI', line, re.IGNORECASE):
            cleaned_lines.append(line.strip())  # Th√™m .strip() ƒë·ªÉ x√≥a kho·∫£ng tr·∫Øng th·ª´a

    # 3. N·ªëi c√°c d√≤ng ƒë√£ l·ªçc l·∫°i
    final_suggestion = "\n".join(cleaned_lines)

    # 4. X·ª≠ l√Ω tr∆∞·ªùng h·ª£p sau khi l·ªçc kh√¥ng c√≤n g√¨
    if not final_suggestion.strip():
        return "Kh√¥ng c√≥ g·ª£i √Ω."

    return final_suggestion


def format_analysis_result(result: dict) -> str:
    """ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ph√¢n t√≠ch chi ti·∫øt sang ti·∫øng Vi·ªát."""
    if result.get('error'):
        return f"‚ùå **L·ªói:** {result.get('message')}"

    # --- 1. Tr√≠ch xu·∫•t d·ªØ li·ªáu ---
    symbol = result.get('symbol', 'N/A')
    timeframe = result.get('timeframe', 'N/A')
    price = result.get('current_price', 0)

    indicators = result.get('indicators', {})
    smc = result.get('smc_analysis', {})
    trading_signals = result.get('trading_signals', {})

    # L·∫•y g·ª£i √Ω g·ªëc
    original_suggestion = result.get('analysis', {}).get('suggestion', 'Kh√¥ng c√≥ g·ª£i √Ω.')

    # **THAY ƒê·ªîI ·ªû ƒê√ÇY: L·ªçc v√† l√†m s·∫°ch g·ª£i √Ω**
    suggestion = _clean_suggestion(original_suggestion)

    # --- 2. X√¢y d·ª±ng t·ª´ng ph·∫ßn c·ªßa tin nh·∫Øn ---

    # Ti√™u ƒë·ªÅ
    header = f"üìä *Ph√¢n t√≠ch {symbol} - {timeframe}*\n"

    # Th√¥ng tin gi√°
    price_info = (
        f"üí∞ *Gi√° hi·ªán t·∫°i:* ${format_price(price)}\n"
        f"üìà *Thay ƒë·ªïi 24h:* {indicators.get('price_change_pct', 0):+.2f}%\n"
    )

    # Ph·∫ßn PH√ÇN T√çCH
    analysis_section = "üîç *ANALYSIS:*\n"

    bos_list = smc.get('break_of_structure', [])
    analysis_section += f"üîÑ *Structure:*\n"
    if bos_list:
        latest_bos = bos_list[-1]
        bos_type = latest_bos.get('type', 'N/A').replace('_bos', ' ').upper()
        analysis_section += f"    *G·∫ßn nh·∫•t:* {bos_type}\n"
        analysis_section += f"    *Price:* ${format_price(latest_bos.get('price', 0))}\n"

    lz_list = smc.get('liquidity_zones', [])
    analysis_section += f"üíß *Liquidity Zones:* \n"
    if lz_list:
        latest_lz = lz_list[-1]
        lz_type = latest_lz.get('type', 'N/A').replace('_', ' ').title()
        analysis_section += f"    *G·∫ßn nh·∫•t:* {lz_type}\n"
        analysis_section += f"    *Level:* ${format_price(latest_lz.get('price', 0))}\n"

    # Ph·∫ßn T√çN HI·ªÜU GIAO D·ªäCH
    signals_section = "üîî *TRADING SIGNALS:*\n"
    has_signal = False
    if trading_signals:
        entry_long = trading_signals.get('entry_long', [])
        entry_short = trading_signals.get('entry_short', [])

        if entry_long:
            has_signal = True
            latest_long = entry_long[-1]
            signals_section += f"üü¢ *Long Signal:* ${format_price(latest_long.get('price', 0))}\n"
            # signals_section += f"    *Tag:* {latest_long.get('tag', 'N/A')}\n"

        if entry_short:
            has_signal = True
            latest_short = entry_short[-1]
            signals_section += f"üî¥ *Short Signal:* ${format_price(latest_short.get('price', 0))}\n"
            # signals_section += f"    *Tag:* {latest_short.get('tag', 'N/A')}\n"

    if not has_signal:
        signals_section += "‚è∏Ô∏è Kh√¥ng c√≥ t√≠n hi·ªáu v√†o l·ªánh m·ªõi.\n"

    # G·ª£i √Ω Trading (ƒê√£ ƒë∆∞·ª£c l·ªçc)
    suggestion_section = f"üí° *G·ª£i √Ω Trading:*\n{suggestion}\n"

    # D·∫•u th·ªùi gian
    timestamp = datetime.fromtimestamp(result.get('timestamp', datetime.now().timestamp()))
    footer = f"üïê *C·∫≠p nh·∫≠t:* {timestamp.strftime('%H:%M:%S %d/%m/%Y')}"

    # K·∫øt h·ª£p t·∫•t c·∫£
    full_message = (
        f"{header}\n"
        f"{price_info}\n"
        f"{analysis_section}\n"
        f"{signals_section}\n"
        f"{suggestion_section}\n"
        f"{footer}"
    )

    return full_message


def format_scanner_notification(flipped_tokens: list, timeframe: str) -> str:
    """ƒê·ªãnh d·∫°ng th√¥ng b√°o t·ª´ b·ªô qu√©t th·ªã tr∆∞·ªùng."""

    bullish_flips = [t for t in flipped_tokens if t['to'] == 'Long']
    bearish_flips = [t for t in flipped_tokens if t['to'] == 'Short']

    timestamp = datetime.now().strftime('%H:%M %d/%m/%Y')
    message = f"üö® **T√≠n hi·ªáu ƒê·∫£o chi·ªÅu Th·ªã tr∆∞·ªùng - Khung {timeframe}**\n_{timestamp}_\n\n"

    if bullish_flips:
        message += "--- T√çN HI·ªÜU TƒÇNG GI√Å ---\n"
        for token in bullish_flips:
            message += f"üü¢ `{token['symbol']}`\n"
            message += f"    `{token['from']} -> {token['to']}`\n\n"

    if bearish_flips:
        message += "--- T√çN HI·ªÜU GI·∫¢M GI√Å ---\n"
        for token in bearish_flips:
            message += f"üî¥ `{token['symbol']}`\n"
            message += f"    `{token['from']} -> {token['to']}`\n\n"

    message += "_ƒê√¢y l√† nh·ªØng t√≠n hi·ªáu s·ªõm, vui l√≤ng ph√¢n t√≠ch k·ªπ tr∆∞·ªõc khi giao d·ªãch._"

    return message