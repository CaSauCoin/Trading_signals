// frontend/js/main.js
console.log("Đang chạy main.js phiên bản 2.1"); // Dòng này để kiểm tra bạn có đang chạy file mới nhất không

// --- Cấu hình ---
const API_BASE_URL = 'http://127.0.0.1:5000';
const TIMEFRAMES = ['1h', '4h', '1d', '3d', '1w'];
let currentPriceLine = null;
let drawnObjects = []; // Mảng để lưu các đối tượng đã vẽ (đường, shape)

// --- DOM Elements ---
const chartContainer = document.getElementById('chart-container');
const tokenSelector = document.getElementById('token-selector');
const timeframeSelector = document.getElementById('timeframe-selector');
const mainTitle = document.getElementById('main-title');
const loadingSpinner = document.getElementById('loading-spinner');

// --- Khởi tạo biểu đồ Lightweight Charts ---
const chart = LightweightCharts.createChart(chartContainer, {
    width: chartContainer.clientWidth,
    height: chartContainer.clientHeight,
    layout: {
        background: { color: '#ffffff' },
        textColor: '#333',
    },
    grid: {
        vertLines: { color: '#e1ecf2' },
        horzLines: { color: '#e1ecf2' },
    },
    crosshair: {
        mode: LightweightCharts.CrosshairMode.Normal,
    },
    timeScale: {
        borderColor: '#cccccc',
        timeVisible: true,
    },
});
const candlestickSeries = chart.addCandlestickSeries({
    upColor: '#089981',
    downColor: '#f23645',
    borderDownColor: '#f23645',
    borderUpColor: '#089981',
    wickDownColor: '#f23645',
    wickUpColor: '#089981',
});
const volumeSeries = chart.addHistogramSeries({
    priceFormat: {
        type: 'volume',
    },
    priceScaleId: '', // Đặt trên một thang giá riêng
});
chart.priceScale('').applyOptions({
    scaleMargins: {
        top: 0.85, // Dành không gian cho biểu đồ giá
        bottom: 0,
    },
});

// --- Hàm chính: Lấy dữ liệu và vẽ biểu đồ ---
async function fetchAndDrawChart() {
    loadingSpinner.classList.remove('hidden');
    
    const symbol = tokenSelector.value;
    const activeTimeframeBtn = document.querySelector('.timeframe-btn.active');
    if (!symbol || !activeTimeframeBtn) {
        loadingSpinner.classList.add('hidden');
        return;
    }
    const timeframe = activeTimeframeBtn.dataset.value;
    mainTitle.innerText = `Dashboard Real-time cho ${symbol}`;

    try {
        const response = await fetch(`${API_BASE_URL}/api/chart-data?symbol=${symbol}&timeframe=${timeframe}`);
        if (!response.ok) {
            throw new Error(`Lỗi API: ${response.statusText}. Hãy đảm bảo server backend đang chạy.`);
        }
        const data = await response.json();

        // Xóa các đối tượng đã vẽ trước đó
        drawnObjects.forEach(obj => candlestickSeries.removePriceLine(obj));
        drawnObjects = [];
        if (currentPriceLine) {
            candlestickSeries.removePriceLine(currentPriceLine);
            currentPriceLine = null;
        }

        // Cập nhật dữ liệu nến và volume
        candlestickSeries.setData(data.ohlc);
        volumeSeries.setData(data.volume);

        // Vẽ các vùng FVG (sử dụng 2 đường line để mô phỏng)
        if (data.fvgs) {
            data.fvgs.forEach(fvg => {
                const fvgTopLine = candlestickSeries.createPriceLine({ price: fvg.top, color: fvg.color, lineWidth: 1, lineStyle: LightweightCharts.LineStyle.Dashed, axisLabelVisible: false });
                const fvgBottomLine = candlestickSeries.createPriceLine({ price: fvg.bottom, color: fvg.color, lineWidth: 1, lineStyle: LightweightCharts.LineStyle.Dashed, axisLabelVisible: false });
                drawnObjects.push(fvgTopLine);
                drawnObjects.push(fvgBottomLine);
            });
        }
        
        // Vẽ các đường BOS/CHoCH
        if (data.breaks) {
            data.breaks.forEach(b => {
                const line = candlestickSeries.createPriceLine({ price: b.price, color: b.color, lineWidth: 2, lineStyle: LightweightCharts.LineStyle.Solid, axisLabelVisible: true, title: b.type });
                drawnObjects.push(line);
            });
        }

        // Vẽ các mức Fibonacci
        if (data.fibos) {
            data.fibos.forEach(level => {
                const line = candlestickSeries.createPriceLine({ price: level.price, color: level.color, lineWidth: 1, lineStyle: LightweightCharts.LineStyle.Dotted, axisLabelVisible: true, title: level.ratio.toString() });
                drawnObjects.push(line);
            });
        }

        // Vẽ đường giá hiện tại
        if (data.currentPrice) {
            const currentPriceData = data.currentPrice;
            currentPriceLine = candlestickSeries.createPriceLine({
                price: currentPriceData.price,
                color: currentPriceData.color,
                lineWidth: 2,
                lineStyle: LightweightCharts.LineStyle.Dotted,
                axisLabelVisible: true,
                title: ` ${currentPriceData.price.toFixed(4)} `,
                // SỬA LỖI: Đổi 'axisLabelColor' thành 'axisLabelBackgroundColor'
                axisLabelBackgroundColor: currentPriceData.color,
                axisLabelTextColor: 'white',
            });
        }
        
        chart.timeScale().fitContent();

    } catch (error) {
        console.error("Lỗi khi lấy hoặc vẽ dữ liệu:", error);
        candlestickSeries.setData([]);
        volumeSeries.setData([]);
        alert("Không thể kết nối đến server backend. Vui lòng đảm bảo server đang chạy và kiểm tra lại địa chỉ API.");
    } finally {
        loadingSpinner.classList.add('hidden');
    }
}

// --- Khởi tạo ứng dụng ---
async function initializeApp() {
    // 1. Lấy danh sách token và đổ vào selector
    try {
        const tokenResponse = await fetch(`${API_BASE_URL}/api/tokens`);
        const tokens = await tokenResponse.json();
        tokens.forEach(token => {
            const option = document.createElement('option');
            option.value = token;
            option.innerText = token;
            if (token === 'BTC/USDT') {
                option.selected = true;
            }
            tokenSelector.appendChild(option);
        });
    } catch (error) {
        console.error("Không thể tải danh sách token:", error);
        tokenSelector.innerHTML = '<option value="">Lỗi tải</option>';
    }

    // 2. Tạo các nút timeframe
    TIMEFRAMES.forEach(tf => {
        const btn = document.createElement('button');
        btn.className = 'timeframe-btn';
        btn.innerText = tf.toUpperCase();
        btn.dataset.value = tf;
        if (tf === '4h') {
            btn.classList.add('active');
        }
        timeframeSelector.appendChild(btn);
    });

    // 3. Gắn sự kiện
    tokenSelector.addEventListener('change', fetchAndDrawChart);
    timeframeSelector.addEventListener('click', (e) => {
        if (e.target.classList.contains('timeframe-btn')) {
            document.querySelectorAll('.timeframe-btn').forEach(b => b.classList.remove('active'));
            e.target.classList.add('active');
            fetchAndDrawChart();
        }
    });

    // 4. Xử lý resize cửa sổ
    new ResizeObserver(entries => {
        if (entries.length === 0 || entries[0].contentRect.width === 0) { return; }
        const { width, height } = entries[0].contentRect;
        chart.applyOptions({ width, height });
    }).observe(chartContainer);

    // 5. Vẽ biểu đồ lần đầu
    await fetchAndDrawChart();
    
    // 6. Tự động cập nhật
    // setInterval(fetchAndDrawChart, 900000); // Tạm thời tắt để dễ debug
}

initializeApp();
